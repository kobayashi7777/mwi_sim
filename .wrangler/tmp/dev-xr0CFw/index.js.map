{
  "version": 3,
  "sources": ["../bundle-tE2okm/checked-fetch.js", "../../../src/index.js", "file:///C:/Users/L/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "file:///C:/Users/L/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-tE2okm/middleware-insertion-facade.js", "file:///C:/Users/L/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/common.ts", "../bundle-tE2okm/middleware-loader.entry.ts"],
  "sourceRoot": "D:\\ProgramData\\mwi_sim\\.wrangler\\tmp\\dev-xr0CFw",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// export default {\r\n//   async fetch(request, env, ctx) {\r\n//     const url = new URL(request.url);\r\n//     const pathname = url.pathname;\r\n//     const method = request.method;\r\n\r\n//     const corsHeaders = {\r\n//       'Access-Control-Allow-Origin': '*',\r\n//       'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n//       'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n//     };\r\n\r\n//     if (method === 'OPTIONS') {\r\n//       return new Response(null, { headers: corsHeaders });\r\n//     }\r\n\r\n//     // \u6839\u8DEF\u7531\r\n//     if (pathname === '/' && method === 'GET') {\r\n//       return new Response('MWI Simulation API is running', {\r\n//         headers: { 'Content-Type': 'text/plain' },\r\n//       });\r\n//     }\r\n\r\n//     // API\u6D4B\u8BD5\u8DEF\u7531\r\n//     if (pathname === '/api/test' && method === 'GET') {\r\n//       return new Response(JSON.stringify({\r\n//         success: true,\r\n//         message: 'Native routing working',\r\n//         timestamp: new Date().toISOString()\r\n//       }), {\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//       });\r\n//     }\r\n\r\n\r\n//     if (pathname === '/api/simulation' && method === 'POST') {\r\n//         try {\r\n//           const data = await request.json();\r\n          \r\n//           // \u6570\u636E\u9A8C\u8BC1\r\n//           if (!data.map || !data.difficulty || !data.avg_time || !data.simulator_data || !data.character_name) {\r\n//             return new Response(JSON.stringify({\r\n//               success: false,\r\n//               error: 'Missing required fields'\r\n//             }), {\r\n//               status: 400,\r\n//               headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n//             });\r\n//           }\r\n\r\n//           const startTime = Date.now();\r\n          \r\n//           // \u804C\u4E1A\u5224\u65AD\u903B\u8F91\r\n//           const isMace = data.simulator_data.includes('chaotic_flail');\r\n//           const isSword = data.simulator_data.includes('regal_sword');\r\n//           const isSpear = data.simulator_data.includes('furious_spear');\r\n//           const isBulwark = data.simulator_data.includes('griffin_bulwark');\r\n//           const isFireMage = data.simulator_data.includes('blazing_trident');\r\n//           const isNatureMage = data.simulator_data.includes('blooming_trident');\r\n//           const isWaterMage = data.simulator_data.includes('rippling_trident');\r\n//           const isRanged = data.simulator_data.includes('cursed_bow') || data.simulator_data.includes('sundering_crossbow');\r\n\r\n//           const result = await env.DB.prepare(\r\n//             `INSERT INTO simulation_results (\r\n//               map_name, tier_name, avg_time, checked_avg_time, simulator_data, character_name,\r\n//               is_mace, is_sword, is_spear, is_bulwark,\r\n//               is_fire_mage, is_nature_mage, is_water_mage, is_ranged\r\n//             ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`\r\n//           ).bind(\r\n//             data.map, data.difficulty, String(data.avg_time), null, data.simulator_data, data.character_name,\r\n//             isMace ? 1 : 0, isSword ? 1 : 0, isSpear ? 1 : 0, isBulwark ? 1 : 0,\r\n//             isFireMage ? 1 : 0, isNatureMage ? 1 : 0, isWaterMage ? 1 : 0, isRanged ? 1 : 0\r\n//           ).run();\r\n\r\n//           const endTime = Date.now();\r\n\r\n//           return new Response(JSON.stringify({\r\n//             success: true,\r\n//             result: result,\r\n//             executionTime: `${endTime - startTime}ms`\r\n//           }), {\r\n//             headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n//           });\r\n\r\n//         } catch (error) {\r\n//           return new Response(JSON.stringify({\r\n//             success: false,\r\n//             error: error.message,\r\n//             type: 'insert_error'\r\n//           }), {\r\n//             status: 500,\r\n//             headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n//           });\r\n//         }\r\n//       }\r\n    \r\n\r\n//     // 404\u5904\u7406\r\n//     return new Response('API endpoint not found', {\r\n//       status: 404,\r\n//       headers: { 'Content-Type': 'text/plain' },\r\n//     });\r\n//   }\r\n// };\r\n\r\nexport default {\r\n  async fetch(request, env, ctx) {\r\n    const url = new URL(request.url);\r\n    const pathname = url.pathname;\r\n    const method = request.method;\r\n\r\n    // \u8BBE\u7F6ECORS\u5934\r\n    const corsHeaders = {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    };\r\n\r\n    // \u5904\u7406\u9884\u68C0\u8BF7\u6C42\r\n    if (method === 'OPTIONS') {\r\n      return new Response(null, { headers: corsHeaders });\r\n    }\r\n\r\n    try {\r\n      // \u6839\u8DEF\u7531\r\n      if (pathname === '/' && method === 'GET') {\r\n        return new Response('MWI Simulation API is running (native routing)', {\r\n          headers: { ...corsHeaders, 'Content-Type': 'text/plain' },\r\n        });\r\n      }\r\n\r\n      // API\u6D4B\u8BD5\u8DEF\u7531\r\n      if (pathname === '/api/test' && method === 'GET') {\r\n        return new Response(JSON.stringify({\r\n          success: true,\r\n          message: 'Native routing is working perfectly',\r\n          timestamp: new Date().toISOString(),\r\n          method: method,\r\n          url: request.url\r\n        }), {\r\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n        });\r\n      }\r\n\r\n      // \u6570\u636E\u5E93\u8FDE\u63A5\u6D4B\u8BD5\r\n      if (pathname === '/api/test-db' && method === 'GET') {\r\n        try {\r\n          const startTime = Date.now();\r\n          const result = await env.DB.prepare('SELECT 1 as test').first();\r\n          const endTime = Date.now();\r\n          \r\n          return new Response(JSON.stringify({\r\n            success: true,\r\n            database: 'connected',\r\n            result: result,\r\n            executionTime: `${endTime - startTime}ms`,\r\n            timestamp: new Date().toISOString()\r\n          }), {\r\n            headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n          });\r\n        } catch (error) {\r\n          return new Response(JSON.stringify({\r\n            success: false,\r\n            error: 'Database connection failed',\r\n            message: error.message,\r\n            type: 'database_error'\r\n          }), {\r\n            status: 500,\r\n            headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n          });\r\n        }\r\n      }\r\n\r\n      // \u63D2\u5165\u6A21\u62DF\u6570\u636E\r\n      if (pathname === '/api/simulation' && method === 'POST') {\r\n        try {\r\n          const data = await request.json();\r\n          \r\n          // \u6570\u636E\u9A8C\u8BC1\r\n          if (!data.map || !data.difficulty || !data.avg_time || !data.simulator_data || !data.character_name) {\r\n            return new Response(JSON.stringify({\r\n              success: false,\r\n              error: 'Missing required fields'\r\n            }), {\r\n              status: 400,\r\n              headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n            });\r\n          }\r\n\r\n          const startTime = Date.now();\r\n          \r\n          // \u804C\u4E1A\u5224\u65AD\u903B\u8F91\r\n          const isMace = data.simulator_data.includes('chaotic_flail');\r\n          const isSword = data.simulator_data.includes('regal_sword');\r\n          const isSpear = data.simulator_data.includes('furious_spear');\r\n          const isBulwark = data.simulator_data.includes('griffin_bulwark');\r\n          const isFireMage = data.simulator_data.includes('blazing_trident');\r\n          const isNatureMage = data.simulator_data.includes('blooming_trident');\r\n          const isWaterMage = data.simulator_data.includes('rippling_trident');\r\n          const isRanged = data.simulator_data.includes('cursed_bow') || data.simulator_data.includes('sundering_crossbow');\r\n\r\n          const result = await env.DB.prepare(\r\n            `INSERT INTO simulation_results (\r\n              map_name, tier_name, avg_time, checked_avg_time, simulator_data, character_name,\r\n              is_mace, is_sword, is_spear, is_bulwark,\r\n              is_fire_mage, is_nature_mage, is_water_mage, is_ranged\r\n            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`\r\n          ).bind(\r\n            data.map, data.difficulty, String(data.avg_time), null, data.simulator_data, data.character_name,\r\n            isMace ? 1 : 0, isSword ? 1 : 0, isSpear ? 1 : 0, isBulwark ? 1 : 0,\r\n            isFireMage ? 1 : 0, isNatureMage ? 1 : 0, isWaterMage ? 1 : 0, isRanged ? 1 : 0\r\n          ).run();\r\n\r\n          const endTime = Date.now();\r\n\r\n          return new Response(JSON.stringify({\r\n            success: true,\r\n            result: result,\r\n            executionTime: `${endTime - startTime}ms`\r\n          }), {\r\n            headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n          });\r\n\r\n        } catch (error) {\r\n          return new Response(JSON.stringify({\r\n            success: false,\r\n            error: error.message,\r\n            type: 'insert_error'\r\n          }), {\r\n            status: 500,\r\n            headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n          });\r\n        }\r\n      }\r\n\r\n      // 404\u5904\u7406\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'API endpoint not found',\r\n        path: pathname,\r\n        method: method\r\n      }), {\r\n        status: 404,\r\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n      });\r\n\r\n    } catch (error) {\r\n      // \u5168\u5C40\u9519\u8BEF\u5904\u7406\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'Internal server error',\r\n        message: error.message,\r\n        stack: error.stack\r\n      }), {\r\n        status: 500,\r\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n      });\r\n    }\r\n  }\r\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"D:\\\\ProgramData\\\\mwi_sim\\\\src\\\\index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\L\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\L\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"D:\\\\ProgramData\\\\mwi_sim\\\\src\\\\index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"D:\\\\ProgramData\\\\mwi_sim\\\\.wrangler\\\\tmp\\\\bundle-tE2okm\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\L\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"D:\\\\ProgramData\\\\mwi_sim\\\\.wrangler\\\\tmp\\\\bundle-tE2okm\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"D:\\\\ProgramData\\\\mwi_sim\\\\.wrangler\\\\tmp\\\\bundle-tE2okm\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
